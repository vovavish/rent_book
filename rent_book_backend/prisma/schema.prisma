// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  lastname     String
  surname     String?
  email    String  @unique

  passwordHash     String
  refreshTokenHash String?

  phoneNumbers    String[] @default([]) @map("phone_numbers")

  cardNumbers     String[] @default([]) @map("card_numbers")

  roles Role[] @default([USER])

  booksOwned  Book[]   @relation("Owner")    // Книги, которые пользователь сдает в аренду
  rentals     Rental[] @relation("Renter")  // Аренды, где пользователь является арендатором
  ownedRentals Rental[] @relation("Owner")  // Аренды, где пользователь является владельцем

  favoriteBooks Book[] @relation("FavoriteBooks")
  supportRequests SupportRequest[] @relation
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// Перечисления для статуса книги и состояния
enum BookStatus {
  ACTIVE
  RENTED
  CLOSED
}

enum Condition {
  NEW
  GOOD
  WORN
  DAMAGED
}

enum Format {
  HARDCOVER
  PAPERBACK
}

model Book {
  id              Int        @id @default(autoincrement()) // Уникальный идентификатор книги (PK)
  title           String     // Название книги
  user            User       @relation("Owner", fields: [userId], references: [id]) // Владелец книги
  userId          Int        @map("user_id")
  condition       Condition // Состояние книги (new, good, worn, damaged)
  publishedYear   Int       // Год публикации
  isbn            String    @unique // ISBN, уникальный, но опциональный
  language        String    // Язык книги (English, Russian и т.д.)
  category        String    // Категория или жанр
  description     String    // Краткое описание или аннотация
  coverImagesUrls   String[]    @map("cover_images_urls") // Ссылка на обложку

  // Связь с авторами через промежуточную таблицу
  author         String // Связь с таблицей Book_Authors

  // Дополнительные параметры книги
  publisher       String?    // Издательство
  series          String?    // Серия
  edition         String?    // Издание (первое, второе и т.д.)
  pages           Int?       // Количество страниц
  dimensions      String?    // Размеры книги (например, "15x20x3 см")
  format          Format?    // Тип обложки/формата (hardcover, paperback, ebook)
  printRun        Int?       @map("print_run") // Тираж
  weight          Int?       // Вес в граммах
  ageRestriction  String?    @map("age_restriction") // Возрастные ограничения

  // Параметры для функциональности
  price           Float     // Цена книги (для оценки или аренды)
  deposit         Float? @default(0)
  minDaysToRent   Int    @default(0) @map("min_days_to_rent")
  cardNumber      String @default("") @map("card_number")
  availabilityStatus BookStatus @default(ACTIVE) // Статус доступности (active, rented, closed)
  tags            String[]   // Метки или ключевые слова

  rentals         Rental[]   // Связь с арендой

  // История использования
  addedDate       DateTime   @default(now()) @map("added_date") // Дата добавления
  lastRentedDate  DateTime?  @map("last_rented_date") // Дата последней аренды
  rentalCount     Int        @default(0) @map("rental_count") // Количество аренд
  rating          Float?     // Средняя оценка книги
  timesReported   Int        @default(0) @map("times_reported") // Количество жалоб

  favoritedBy User[] @relation("FavoriteBooks")
  // Автоматические поля Prisma
  updatedAt       DateTime   @updatedAt // Дата последнего обновления
}

enum RentalStatus {
  PENDING          // Запрос аренды отправлен. У Владельца появляется кнопки "Подтвердить" или "Отклонить"
  APPROVED_BY_OWNER // Владелец принял запрос (нажал ПОДТВЕРДИТЬ). у Читателя появляется кнопка "ОПЛАТИТЬ" 
  CONFIRMED        // Читатель оплатил аренду (нажал ОПЛАТИТЬ). У Владельца появляется кнопка "Подтвердить передачу". 
  GIVEN_TO_READER  // Владелец подтвердил передачу. У Читателя появляется кнопку "Подтвердить получение"
  CANCELED         // Читатель получил книгу, но захотел отказаться
  ACTIVE           // Читатель получил книгу (Нажал кнопку ПОДТВЕРДИТЬ ПОЛУЧЕНИЕ), аренда переходит в active
  RETURN_APPROVAL  // ВРЕМЯ АРЕНДЫ ЗАКОНЧИЛОСЬ. (Появляется кнопка у Владельца "Подтвердить возврат")
  COMPLETED        // Владелец подтвердил возврат (Нажал на ПОДТВЕРДИТЬ ВОЗВРАТ)
  REJECTED         // Владелец отклонил запрос (нажал ОТКЛОНИТЬ)
}

model Rental {
  id              Int         @id @default(autoincrement())
  book            Book        @relation(fields: [bookId], references: [id])
  bookId          Int         @map("book_id")
  renter          User        @relation("Renter", fields: [renterId], references: [id])
  renterId        Int         @map("renter_id")
  owner           User        @relation("Owner", fields: [ownerId], references: [id])
  ownerId         Int         @map("owner_id")
  
  price           Float       @default(0)

  status          RentalStatus @default(PENDING)
  rentStartDate   DateTime?   // Дата начала аренды
  rentEndDate     DateTime?   // Дата окончания аренды
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum SupportRequestStatus {
  REGISTERED
  IN_PROGRESS
  CLOSED
}

model SupportRequest {
  id        Int                   @id @default(autoincrement())
  title     String                // Заголовок обращения
  content   String                // Текст обращения
  user      User                  @relation(fields: [userId], references: [id])
  userId    Int                   @map("user_id")
  status    SupportRequestStatus  @default(REGISTERED) // Статус обращения
  adminResponse String?
  createdAt DateTime              @default(now()) // Дата создания
  updatedAt DateTime              @updatedAt // Дата обновления

  @@map("support_requests")
}